var shaders = {}
shaders["base_effect_shader_vert"] = "attribute vec4 a_position;varying vec2 v_texCoord;attribute vec2 a_texCoord;void main() {	vec4 zeroToOne = a_position / 1.0;	vec4 zeroToTwo = zeroToOne * 2.0;	vec4 clipSpace = zeroToTwo - 1.0;	gl_Position = vec4(clipSpace);	v_texCoord = a_texCoord;}";
shaders["base_layer_shader_vert"] = "attribute vec4 a_position;uniform mat4 uMatrix;uniform mat4 localMatrix;void main() {	gl_Position = uMatrix * localMatrix * a_position;}";
shaders["base_layer_with_mask_shader_vert"] = "attribute vec4 a_position;uniform mat4 uMatrix;uniform mat4 localMatrix;varying vec2 v_texCoord;attribute vec2 a_texCoord;void main() {	gl_Position = uMatrix * localMatrix * a_position;	v_texCoord = a_texCoord;}";
shaders["comp_layer_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 v_texCoord;void main() {	gl_FragColor = texture2D(u_image, v_texCoord);}";
shaders["comp_layer_shader_vert"] = "attribute vec4 a_position;uniform mat4 uMatrix;uniform mat4 localMatrix;varying vec2 v_texCoord;attribute vec2 a_texCoord;void main() {	gl_Position = uMatrix * localMatrix * a_position;	v_texCoord = a_texCoord;}";
shaders["image_layer_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 v_texCoord;void main() {	gl_FragColor = texture2D(u_image, v_texCoord);}";
shaders["image_layer_shader_vert"] = "attribute vec4 a_position;uniform mat4 uMatrix;uniform mat4 localMatrix;varying vec2 v_texCoord;attribute vec2 a_texCoord;void main() {	gl_Position = uMatrix * localMatrix * a_position;	v_texCoord = a_texCoord;}";
shaders["mask_shader_frag"] = "precision mediump float;uniform sampler2D original_image;uniform sampler2D mask_image;varying vec2 v_texCoord;void main() {	vec4 original_color = texture2D(original_image, v_texCoord);	vec4 mask_color = texture2D(mask_image, v_texCoord);	gl_FragColor = vec4(original_color.rgb,mask_color.a * original_color.a);}";
shaders["mask_shader_vert"] = "attribute vec4 a_position;varying vec2 v_texCoord;attribute vec2 a_texCoord;void main() {	vec4 zeroToOne = a_position / 1.0;	vec4 zeroToTwo = zeroToOne * 2.0;	vec4 clipSpace = zeroToTwo - 1.0;	gl_Position = vec4(clipSpace);	v_texCoord = a_texCoord;}";
shaders["noop_effect_shader_frag"] = "precision mediump float;void main() {	gl_FragColor = vec4(1.0,1.0,0.0,1.0);}";
shaders["ripple_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 vUv;vec2 fromPolar( vec2 uv ) {  uv = vec2( uv.x * cos( uv.y ), uv.x * sin( uv.y ) );  return uv + vec2( 0.5 );}vec2 toPolar( vec2 uv ) {  uv -= vec2( 0.5 );  return vec2( length( uv ), atan( uv.y, uv.x ));  }float diagonal = 1.4142;float PI = 3.141592;float wave_width = 9.0;float wave_height = 0.008;void main() {	vec2 vUv_1 = vUv;	vUv_1 = toPolar(vUv_1);	float angle = (vUv_1.y + PI) * 180.0 / PI;	float segment = mod(angle, wave_width);	float segment_perc = segment / wave_width;	vUv_1.x += wave_height * sin(PI * segment_perc);		vec2 cart_vUv_1 = fromPolar(vUv_1);	if(cart_vUv_1.x < 0.0 || cart_vUv_1.x > 1.0 || cart_vUv_1.y < 0.0 || cart_vUv_1.y > 1.0) {		discard;	}	if(segment_perc < 0.5) {	}	gl_FragColor = texture2D(u_image, cart_vUv_1);}";
shaders["ripple_shader_vert"] = "attribute vec4 a_position;attribute vec2 a_texCoord;varying vec2 v_texCoord;varying vec2 vUv;void main() {	vec4 zeroToOne = a_position / 1.0;	vec4 zeroToTwo = zeroToOne * 2.0;	vec4 clipSpace = zeroToTwo - 1.0;	gl_Position = vec4(clipSpace);	vUv = a_texCoord;}";
shaders["solid_layer_shader_frag"] = "precision mediump float;uniform vec4 colorUniform;void main() {	gl_FragColor = colorUniform;}";
shaders["solid_layer_with_mask_shader_frag"] = "precision mediump float;uniform vec4 colorUniform;varying vec2 v_texCoord;uniform sampler2D mask_image;void main() {	vec4 mask_value = texture2D(mask_image, v_texCoord);	gl_FragColor = vec4(colorUniform.rgb, mask_value.r);}";
shaders["spherize_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 vUv;vec2 fromPolar( vec2 uv ) {  uv = vec2( uv.x * cos( uv.y ), uv.x * sin( uv.y ) );  return uv + vec2( 0.5 );}vec2 toPolar( vec2 uv ) {  uv -= vec2( 0.5 );  return vec2( length( uv ), atan( uv.y, uv.x ));  }float diagonal = 1.4142;float PI = 3.141592;float wave_width = 9.0;float wave_height = 0.008;void main() {	vec2 vUv_1 = toPolar(vUv);	vUv_1.x += diagonal * sin(PI * vUv_1.x / diagonal);	vUv_1 = fromPolar(vUv_1);	gl_FragColor = texture2D(u_image, vUv_1);}";
shaders["tint_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 v_texCoord;uniform float color_amount;uniform vec4 whiteToColor;uniform vec4 blackToColor;void main() {    vec4 textureValue = texture2D(u_image, v_texCoord);    float saturation = (textureValue.r + textureValue.g + textureValue.b) / 3.0;    vec4 textureMapped = blackToColor + (whiteToColor - blackToColor) * saturation;    gl_FragColor = vec4(mix(textureValue.rgb, textureMapped.rgb, color_amount),textureValue.a);}";
shaders["twirl_shader_frag"] = "precision mediump float;uniform sampler2D u_image;varying vec2 vUv;uniform float angle;uniform float radius;uniform vec2 center;vec2 fromPolar( vec2 uv ) {  uv = vec2( uv.x * cos( uv.y ), uv.x * sin( uv.y ) );  return uv + vec2( 0.5 ) + center;}vec2 toPolar( vec2 uv ) {  uv -= vec2( 0.5 ) + center;  return vec2( length( uv ), atan( uv.y, uv.x ));  }float diagonal = 1.4142;void main() {	vec2 vUv_1 = vUv;	vUv_1 = toPolar(vUv_1);	float perc = 0.0;	if(vUv_1.x < diagonal * radius) {		perc = vUv_1.x / (diagonal * radius);		perc = (cos(perc * 3.141592) + 1.0) / 2.0;		vUv_1.y += radians(-angle * perc);	}	vec2 cart_vUv_1 = fromPolar(vUv_1);	if(cart_vUv_1.x < 0.0 || cart_vUv_1.x > 1.0 || cart_vUv_1.y < 0.0 || cart_vUv_1.y > 1.0) {		discard;	} else {		gl_FragColor = texture2D(u_image, cart_vUv_1);	}}";
shaders["twirl_shader_vert"] = "attribute vec4 a_position;attribute vec2 a_texCoord;varying vec2 v_texCoord;varying vec2 vUv;void main() {	vec4 zeroToOne = a_position / 1.0;	vec4 zeroToTwo = zeroToOne * 2.0;	vec4 clipSpace = zeroToTwo - 1.0;	gl_Position = vec4(clipSpace);	vUv = a_texCoord;}";
function get_shader(name) {
return shaders[name];
}
